! Info for SLURM job submission to give to run_script function in isca_tools/jasmin/run/base.py.
&slurm_info
   jobs_dir = '/home/users/jamd1/Isca/jobs/'                  ! Directory containing jobs on JASMIN
   script_path = 'cesm/3_hour/hottest_quant/save_quant_ind.py'  ! Path to python script within jobs_dir
   script_args =                                              ! Will set to the path to this file if blank
   job_name =                                                 ! Set to name of directory containing this file if blank
   time = '24:00:00'            ! Maximum wall time for your job in format `hh:mm:ss`
   n_tasks = 1                  ! Number of tasks to run (usually 1 for a single script).
   cpus_per_task = 1            ! How many CPUs to allocate per task.
   mem = 100                     ! Memory to allocate for the job in GB.
   partition = 'standard'          ! Specifies the partition for the job. Options are `standard`, `highres` and `debug`.
   qos =                        ! Set to same as partition if blank
   conda_env = 'myenv'          ! Name of the conda environment on JASMIN to use.
   account = 'global_ex'        ! Account to use for submitting jobs.
   exist_output_ok =            ! Whether to run script if console_output for `job_name` already exists
                                ! blank will just append number if output already exists.
/

&script_info
    exp_name = 'e.e20.E1850TEST.f09_g17.co2_2x_3hour_output'        ! Name of experiment within archive_dir
    archive_dir = '/gws/nopw/j04/global_ex/jamd1/cesm/CESM2.1.3/archive/'       ! Directory containing cesm experiments on JASMIN
    out_dir =                                            ! Leave blank to set to directory containing this file
    out_name = 'time_ind.nc'                              ! Name of output within out_dir
    quant = 99             ! Collect days hotter than this quantile
    refht_level_index =    ! Blank means using TREFHT to find indices of hottest days, can also provide index to use as given model level index
    hour_spacing = 13      ! The hottest times must be separated >= this many hours
    year_files =
    month_files =
    lat_ind =                   ! leave None to consider all latitudes
    lon_ind =                   ! leave None to consider all longitudes
    lat_min =                   ! leave None to consider all latitudes
    lat_max =
    lon_min =                   ! leave None to consider all longitudes
    lon_max =
    chunks_time =               ! Chunking info for less memory usage (leave empty to not chunk in given dimension)
    chunks_lat =                ! Chunking info for less memory usage (1 chunk per latitude as we do lat by lat comp)
    chunks_lon =                ! Chunking info for less memory usage
    loop_over_lat = .false.     ! for memory purposes, may consider each lat one at a time
    load_all_at_start = .true.  ! Whether to load entire year at start
    load_parallel = .false.     ! Whether to use parallel processing when loading
    overwrite = .false.         ! If .true. will overwrite data, if false will give error.
    complevel = 4               ! How much compression, higher is more (1-9)
/
